# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class ChatStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SignInExisting = channel.unary_unary(
                '/chat.Chat/SignInExisting',
                request_serializer=chat__pb2.Username.SerializeToString,
                response_deserializer=chat__pb2.Unreads.FromString,
                )
        self.AddUser = channel.unary_unary(
                '/chat.Chat/AddUser',
                request_serializer=chat__pb2.Username.SerializeToString,
                response_deserializer=chat__pb2.Unreads.FromString,
                )
        self.Send = channel.unary_unary(
                '/chat.Chat/Send',
                request_serializer=chat__pb2.SendRequest.SerializeToString,
                response_deserializer=chat__pb2.Payload.FromString,
                )
        self.Listen = channel.unary_stream(
                '/chat.Chat/Listen',
                request_serializer=chat__pb2.Username.SerializeToString,
                response_deserializer=chat__pb2.Payload.FromString,
                )


class ChatServicer(object):
    """Interface exported by the server.
    """

    def SignInExisting(self, request, context):
        """A simple RPC.

        Signs in existing user and gets unread messages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Signs in new user and gets unread messages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Send(self, request, context):
        """Sends message to recipient with Username
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Listen(self, request, context):
        """Response stream for client to receive messages from server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SignInExisting': grpc.unary_unary_rpc_method_handler(
                    servicer.SignInExisting,
                    request_deserializer=chat__pb2.Username.FromString,
                    response_serializer=chat__pb2.Unreads.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=chat__pb2.Username.FromString,
                    response_serializer=chat__pb2.Unreads.SerializeToString,
            ),
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=chat__pb2.SendRequest.FromString,
                    response_serializer=chat__pb2.Payload.SerializeToString,
            ),
            'Listen': grpc.unary_stream_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=chat__pb2.Username.FromString,
                    response_serializer=chat__pb2.Payload.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.Chat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chat(object):
    """Interface exported by the server.
    """

    @staticmethod
    def SignInExisting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/SignInExisting',
            chat__pb2.Username.SerializeToString,
            chat__pb2.Unreads.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/AddUser',
            chat__pb2.Username.SerializeToString,
            chat__pb2.Unreads.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/Send',
            chat__pb2.SendRequest.SerializeToString,
            chat__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Listen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.Chat/Listen',
            chat__pb2.Username.SerializeToString,
            chat__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
